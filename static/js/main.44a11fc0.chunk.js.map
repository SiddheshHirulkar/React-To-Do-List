{"version":3,"sources":["components/Search.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["Search","item","setItem","element","setElement","onSubmit","e","preventDefault","allItems","console","log","className","name","value","onChange","target","type","List","map","items","index","key","id","onClick","itemNo","filter","arrEle","App","useState","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6MAmCeA,EAjCA,SAAC,GAA2C,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,QAASC,EAAgB,EAAhBA,WAetC,OACI,6BACI,0BAAMC,SAXE,SAACC,GACbA,EAAEC,iBACFL,EAAQ,IACRE,GAAW,SAACI,GACR,MAAM,GAAN,mBAAWA,GAAX,CAAqBP,OAEzBQ,QAAQC,IAAIP,KAMJ,2BACIQ,UAAU,yCACVC,KAAK,WACLC,MAAOZ,EACPa,SApBI,SAACR,GACjBJ,EAAQI,EAAES,OAAOF,UAqBT,4BACIF,UAAU,qCACVK,KAAK,UAFT,UCSDC,G,KAhCF,SAAC,GAA6B,IAA3Bd,EAA0B,EAA1BA,QAASC,EAAiB,EAAjBA,WAYrB,OACI,yBAAKO,UAAU,UACE,OAAZR,EACGA,EAAQe,KAAI,SAACC,EAAOC,GAAR,OACR,yBACIC,IAAKD,EACLT,UAAU,qCACVW,GAAIF,GACP,8BACG,uBACIT,UAAU,8BACVY,QAAS,kBArBbC,EAqB8BJ,EApB9CX,QAAQC,IAAIc,QAEZpB,GAAW,SAACD,GACR,OAAOA,EAAQsB,QAAO,SAACC,EAAQN,GAC3B,OAAOA,IAAUI,QALV,IAACA,IAmBA,UAGYL,OAGnB,M,MCJFQ,MAjBf,WAAgB,IAAD,EAEWC,mBAAS,IAFpB,mBAEN3B,EAFM,KAEAC,EAFA,OAIiB0B,mBAAS,IAJ1B,mBAINzB,EAJM,KAIGC,EAJH,KAMb,OACE,yBAAKO,UAAU,2CACb,yBAAKA,UAAU,8CACb,wBAAIA,UAAU,oBAAd,cACE,kBAAC,EAAD,CAAQV,KAAMA,EAAMC,QAASA,EAASC,QAASA,EAASC,WAAYA,IACpE,kBAAC,EAAD,CAAMD,QAASA,EAASC,WAAYA,OCR1ByB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,a","file":"static/js/main.44a11fc0.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Search = ({ item, setItem, element, setElement}) => {\r\n    \r\n    const getItemName = (e) => {\r\n        setItem(e.target.value);\r\n    }\r\n\r\n    const getItem = (e) => {\r\n        e.preventDefault();\r\n        setItem('');\r\n        setElement((allItems) =>{\r\n            return [...allItems, item];\r\n        });\r\n        console.log(element);\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <form onSubmit={getItem}>\r\n                <input\r\n                    className=\"input form-control mb-3 col-7 d-inline\"\r\n                    name=\"itemName\"\r\n                    value={item}\r\n                    onChange={getItemName}\r\n                />\r\n                <button \r\n                    className=\"btn btn-success mb-1 ml-4 d-inline\"\r\n                    type=\"submit\"\r\n                >Add</button>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search\r\n","import React from 'react'\r\nimport '../App.css'\r\n\r\nconst List = ({ element, setElement }) => {\r\n    \r\n    const deleteItem = (itemNo) => {\r\n        console.log(itemNo);\r\n        //list.splice(itemNo, 1);\r\n        setElement((element) => {\r\n            return element.filter((arrEle, index) => {\r\n                return index !== itemNo;\r\n            });\r\n        });\r\n    }\r\n\r\n    return (\r\n        <div className=\"mm-top\">\r\n            {element !== null ? (\r\n                element.map((items, index) => \r\n                    <div \r\n                        key={index} \r\n                        className=\"d-flex bg-light col-8 box-card p-2\"\r\n                        id={index}\r\n                    ><span>\r\n                        <i \r\n                            className=\"btn badge badge-danger mr-5\"\r\n                            onClick={() => deleteItem(index)}\r\n                        >Delete</i>{items}\r\n                    </span>\r\n                    </div>)    \r\n            ) : ('')}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default List\r\n","import React, { useState } from 'react';\nimport $ from 'jquery';\nimport Popper from 'popper.js';\nimport Search from './components/Search';\nimport List from './components/List';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css'\n\nfunction App() {\n  \n  const [item, setItem] = useState('');\n\n  const [element, setElement] = useState([]);\n  \n  return (\n    <div className=\"container d-flex justify-content-center\">\n      <div className=\"bg-secondary text-center box-card col-lg-8\">\n        <h1 className=\"font-weight-bold\">To Do List</h1>\n          <Search item={item} setItem={setItem} element={element} setElement={setElement} />\n          <List element={element} setElement={setElement} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}